
#
# Non-human account to service mappings:
#
%user2service = ();

use File::Find;
use IO::File;
my %u2s = ();
my @u2s_paths = qw{
	/etc/krb5/krb5_keytab.user2service
	/etc/krb5/krb5_keytab.user2service.d/
    };
my $u2s_wanted = sub {
    return if ! -f $_;
    my $f = IO::File->new($_, "r") or next; # silently ignore errors
    local *_;
    while (<$f>) {
	next if m{^\s*(?:#|$)};
	my ($u, @s) = split(" ", $_);
	map { $u2s{$u}->{$_} = 1 } @s;
    }
    $f->close(); # silently ignore errors
};
find($u2s_wanted, @u2s_paths);
while (my ($k, $v) = each %u2s) { $user2service{$k} = [keys %$v]; }

#
# list of permitted enctypes:

@allowed_enctypes = qw{aes256-cts aes128-cts des3-cbc-sha1 rc4-hmac
    des-cbc-crc};

#
# List of appropriate admin users:

@admin_users = qw{ };

$default_krb5_lib = 'mitkrb5/1.4';

#
# mapping of Kerberos library versions to enctypes:

%krb5_libs = (
	'mitkrb5/1.4'		=> [ 'aes256-cts', 'aes128-cts',
				     'rc4-hmac', 'des3-cbc-sha1' ],

	'mitkrb5/1.3'		=> [ 'rc4-hmac', 'des3-cbc-sha1' ],
	'mitkrb5/1.2'		=> [ 'des3-cbc-sha1' ],

	'sunjdk_us_jce/1.4'	=> [ 'des-cbc-crc' ],
	'sunjdk_us_jce/1.5'	=> [ 'des-cbc-crc' ],
	'sunjdk_us_jce/1.6'	=> [ 'aes256-cts', 'aes128-cts',
				     'rc4-hmac' ],

	'sunjdk/1.4'		=> [ 'des-cbc-crc' ],
	'sunjdk/1.5'		=> [ 'des-cbc-crc' ],
	'sunjdk/1.6'		=> [ 'aes128-cts', 'rc4-hmac' ],
);

#
# And their unfortunate quirks...:

%krb5_lib_quirks = (
	'mitkrb5/1.2'		=> [ 'nounsupp' ],

	'sunjdk_us_jce/1.4'	=> [ 'ascending' ],
	'sunjdk_us_jce/1.5'	=> [ 'ascending' ],
	'sunjdk_us_jce/1.6'	=> [ 'ascending' ],

	'sunjdk/1.4'		=> [ 'ascending' ],
	'sunjdk/1.5'		=> [ 'ascending' ],
	'sunjdk/1.6'		=> [ 'ascending' ],
);

